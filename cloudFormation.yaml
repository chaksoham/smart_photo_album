AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Smart-Photo-Application
Parameters:
  DefaultRootObject:
    Description: 'The default path for the index document.'
    Type: String
    Default: '/index.html'
  ErrorPagePath:
    Description: 'The path of the error page for the website.'
    Type: String
    Default: '/404.html'
  IPAddress:
    Type: String
    Description:
      "0.0.0.0/32"
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.
  ElasticSearchName:
    Type: String
    Description:
      "sample-photo-domain"

  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.192.10.0/24

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.192.11.0/24

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.192.20.0/24

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.192.21.0/24

  NamePrefix:
    Type: String
    Description: Prefix to add to Lex resource names
    Default: WebUi
    MinLength: 3
    MaxLength: 32
    AllowedPattern: '^[a-zA-Z\._]+$'
    ConstraintDescription: Must conform with the permitted Lex Bot name pattern.
  
  CustomResourceCodeBucket:
    Description: S3 bucket where the Lambda bundle is located
    Type: String
    Default: aws-bigdata-blog

  CustomResourceCodeObject:
    Type: String
    Description: >
        S3 object zip file containing Lambda custom resource functions
    Default: artifacts/aws-lex-web-ui/artifacts/custom-resources.zip

  ShouldDeleteBot:
    Type: String
    Default: true
    AllowedValues:
          - true
          - false
    Description: >
            If set to True, the Lex bot and associated resources will
            be deleted when the stack is deleted. Otherwise, the bot
            will be preserved.    

Resources:
  SearchLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SearchLambdaFunction-bot
      Handler: search-lambda.handler
      Runtime: python3.7
      CodeUri: s3://backend-deployement-pipeline-bucket/40223ccaa6c9da3168446516b0771d7a
      Events:
        MyTimeApi:
          Type: Api
          Properties:
            Path: /TimeResource
            Method: GET

  IndexLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: IndexLambdaFunction-bot
      Handler: index-lambda.handler
      Runtime: python3.7
      CodeUri: s3://backend-deployement-pipeline-bucket/40223ccaa6c9da3168446516b0771d7a
      Events:
        MyTimeApi:
          Type: Api
          Properties:
            Path: /TimeResource
            Method: POST   

  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: sample-photos-bucket-bot

  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: front-end-from-cloud-formation

  ElasticSearchDemo:
    Type: AWS::Elasticsearch::Domain
    Properties: 
      AccessPolicies:
        Statement:
          - Effect: Allow
            Principal:
              AWS: "*"
            Action: "es:*"
            Resource: !Sub arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${ElasticSearchName}/*
            Condition:
              IpAddress:
                aws:SourceIp:
                  - !Ref IPAddress
      DomainName: !Ref ElasticSearchName
      ElasticsearchVersion: '6.4'
      ElasticsearchClusterConfig:
        InstanceType: t2.small.elasticsearch
        InstanceCount: 1
      EBSOptions:
        EBSEnabled: true
        VolumeType: gp2
        VolumeSize: 35      

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)
  
  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1


  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ1)

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  NoIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "no-ingress-sg"
      GroupDescription: "Security group with no ingress rule"
      VpcId: !Ref VPC
  LexBot:
        Type: Custom::LexBot
        Properties:
            BotName: 'PhotoBot'
            BotAlias: 'PhotoChatbot' 
            ServiceToken: !GetAtt LexBotLambda.Arn
            NamePrefix: !Ref NamePrefix
            ShouldDelete: !Ref ShouldDeleteBot

    # Lambda function for custom resource
  LexBotLambda:
        Type: AWS::Lambda::Function
        Properties:
            Code:
                S3Bucket: !Ref CustomResourceCodeBucket
                S3Key: !Ref CustomResourceCodeObject
            Handler: lex-manager.handler
            Role: !GetAtt LexBotLambdaRole.Arn
            Runtime: python2.7
            Timeout: 300

  LexBotLambdaRole:
        Type: AWS::IAM::Role
        Properties:
            Path: /
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                    - Principal:
                          Service:
                              - lambda.amazonaws.com
                      Effect: Allow
                      Action:
                          - sts:AssumeRole
            Policies:
                - PolicyName: LogsForLambda
                  PolicyDocument:
                      Version: 2012-10-17
                      Statement:
                          - Effect: Allow
                            Action:
                                - logs:CreateLogGroup
                                - logs:CreateLogStream
                                - logs:PutLogEvents
                            Resource:
                                - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                                - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:*"
                - PolicyName: LexGetLists
                  PolicyDocument:
                      Version: 2012-10-17
                      Statement:
                          - Effect: Allow
                            Action:
                                - lex:GetBots
                                - lex:GetBotAliases
                                - lex:GetIntents
                                - lex:GetSlotTypes
                            Resource:
                                - !Sub "arn:aws:lex:${AWS::Region}:${AWS::AccountId}:bot:*"
                                - !Sub "arn:aws:lex:${AWS::Region}:${AWS::AccountId}:intent:*"
                                - !Sub "arn:aws:lex:${AWS::Region}:${AWS::AccountId}:slottype:*"
                - PolicyName: LexGet
                  PolicyDocument:
                      Version: 2012-10-17
                      Statement:
                          - Effect: Allow
                            Action:
                                - lex:Get*
                            Resource:
                                - !Sub "arn:aws:lex:${AWS::Region}:${AWS::AccountId}:bot:${NamePrefix}*:*"
                                - !Sub "arn:aws:lex:${AWS::Region}:${AWS::AccountId}:intent:${NamePrefix}*:*"
                                - !Sub "arn:aws:lex:${AWS::Region}:${AWS::AccountId}:slottype:*"
                                - !Sub "arn:aws:lex:${AWS::Region}:${AWS::AccountId}:slottype:${NamePrefix}*:*"
                - PolicyName: LexMutating
                  PolicyDocument:
                      Version: 2012-10-17
                      Statement:
                          - Effect: Allow
                            Action:
                                - lex:Put*
                                - lex:Delete*
                            Resource:
                                - !Sub "arn:aws:lex:${AWS::Region}:${AWS::AccountId}:bot:${NamePrefix}*:*"
                                - !Sub "arn:aws:lex:${AWS::Region}:${AWS::AccountId}:intent:${NamePrefix}*:*"
                                - !Sub "arn:aws:lex:${AWS::Region}:${AWS::AccountId}:slottype:*"
                                - !Sub "arn:aws:lex:${AWS::Region}:${AWS::AccountId}:slottype:${NamePrefix}*:*"     



